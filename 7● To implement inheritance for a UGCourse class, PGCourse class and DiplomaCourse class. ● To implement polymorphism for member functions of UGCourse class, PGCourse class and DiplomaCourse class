7A.
#include <iostream>
#include <string>
using namespace std;
// Base class Course
class Course {
    protected: int ch;
public:
      int AdmDetails()  {
        cout<<"\n Welcome To Admission Section"<<endl;
        cout<<"Select Course type" <<endl;
        cout<<"Enter your choice 1 for UG 2 for PG 3 for Diploma Course 4 to exit"<<endl;
        cin>>ch;
        if(ch==1){
            return 1;
        }
        else if (ch==2){
            return 2;
        }
        else if(ch==3){
            return 3;
        }
          }
           };
// UGCourse class inheriting from Course
class UGCourse : public Course {
private:
    string universityName;
public:
        void UGDetails(string CName,string CCode,string UName)  {
        cout << "UG Course Details:" << endl;
        cout << "Course Name:" <<CName<< endl;
        cout << "Course Code:" <<CCode<< endl;
        cout << "University Name: " << UName << endl;    }};
// PGCourse class inheriting from Course
class PGCourse : public Course {
private:
    string universityName;
public:   
    void PGdisplayDetails(string CName,string CCode,string UName)  {
         cout << "PG Course Details:" << endl;
        cout << "Course Name:" <<CName<< endl;
        cout << "Course Code:" <<CCode<< endl;
        cout << "University Name: " << UName << endl; } };
// DiplomaCourse class inheriting from Course
class DiplomaCourse : public Course {
private:
    string instituteName;
public:
    void DPdisplayDetails(string CName,string CCode,string IName)  {
        cout << "Diploma Course Details:" << endl;
        cout << "Course Name:" <<CName<< endl;
        cout << "Course Code:" <<CCode<< endl;
        cout << "Institution Name: " << IName << endl;   }  };
int main() {
    int ch1;
    UGCourse ugobj;
    PGCourse pgobj;
    DiplomaCourse dipobj;
    ch1=dipobj.AdmDetails();
    
    if(ch1==1){
ugobj.UGDetails("Bachelor of Science", "UG101", "XYX University");
    cout << endl;
    }
    else if(ch1==2){
    pgobj.PGdisplayDetails("Master of Science", "PG101", "XYZ University");
    cout << endl;
    }
    else if(ch1==3){
    dipobj.DPdisplayDetails("Diploma in Web Development", "DIP101", "WebTech Institute");
    }
    else if(ch1==4){
       cout<<"\n Thanks"; 
    }
    
    return 0;}

7B.
#include <iostream>
#include <string>

class Course {
protected:
    std::string courseName;
    int courseId;
    std::string courseType;
public:
    Course(const std::string& name, int id, const std::string& type)
        : courseName(name), courseId(id), courseType(type) {}

    virtual void display() {
        std::cout << "Course Name: " << courseName << std::endl;
        std::cout << "Course ID: " << courseId << std::endl;
        std::cout << "Course Type: " << courseType << std::endl;
    }

    virtual void study() {
        std::cout << "Studying generic course material." << std::endl;
    }
};

class UGCourse : public Course {
    int level;
public:
    UGCourse(const std::string& name, int id, int lvl)
        : Course(name, id, "UG"), level(lvl) {}

    void display() override {
        Course::display();
        std::cout << "Level: " << level << std::endl;
    }

    void study() override {
        std::cout << "Studying undergraduate course material." << std::endl;
    }
};

class PGCourse : public Course {
    std::string specialization;
public:
    PGCourse(const std::string& name, int id, const std::string& spec)
        : Course(name, id, "PG"), specialization(spec) {}

    void display() override {
        Course::display();
        std::cout << "Specialization: " << specialization << std::endl;
    }

    void study() override {
        std::cout << "Studying postgraduate course material." << std::endl;
    }
};

class DiplomaCourse : public Course {
    int duration;
public:
    DiplomaCourse(const std::string& name, int id, int dur)
        : Course(name, id, "Diploma"), duration(dur) {}

    void display() override {
        Course::display();
        std::cout << "Duration: " << duration << " months" << std::endl;
    }

    void study() override {
        std::cout << "Studying diploma course material." << std::endl;
    }
};

int main() {
    Course* courses[3];
    courses[0] = new UGCourse("Bachelor of Science", 1001, 1);
    courses[1] = new PGCourse("Master of Arts", 2001, "Literature");
    courses[2] = new DiplomaCourse("Web Development Diploma", 3001, 12);

    for (int i = 0; i < 3; ++i) {
        courses[i]->display();
        courses[i]->study();
        std::cout << std::endl;
    }

    // Clean up dynamically allocated memory
    for (int i = 0; i < 3; ++i) {
        delete courses[i];
    }

    return 0;
}
